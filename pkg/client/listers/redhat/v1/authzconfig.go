/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	v1 "github.com/kcp-dev/kcp/pkg/apis/redhat/v1"
)

// AuthzConfigLister helps list AuthzConfigs.
// All objects returned here must be treated as read-only.
type AuthzConfigLister interface {
	// List lists all AuthzConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AuthzConfig, err error)
	// AuthzConfigs returns an object that can list and get AuthzConfigs.
	AuthzConfigs(namespace string) AuthzConfigNamespaceLister
	AuthzConfigListerExpansion
}

// authzConfigLister implements the AuthzConfigLister interface.
type authzConfigLister struct {
	indexer cache.Indexer
}

// NewAuthzConfigLister returns a new AuthzConfigLister.
func NewAuthzConfigLister(indexer cache.Indexer) AuthzConfigLister {
	return &authzConfigLister{indexer: indexer}
}

// List lists all AuthzConfigs in the indexer.
func (s *authzConfigLister) List(selector labels.Selector) (ret []*v1.AuthzConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AuthzConfig))
	})
	return ret, err
}

// AuthzConfigs returns an object that can list and get AuthzConfigs.
func (s *authzConfigLister) AuthzConfigs(namespace string) AuthzConfigNamespaceLister {
	return authzConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AuthzConfigNamespaceLister helps list and get AuthzConfigs.
// All objects returned here must be treated as read-only.
type AuthzConfigNamespaceLister interface {
	// List lists all AuthzConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AuthzConfig, err error)
	// Get retrieves the AuthzConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.AuthzConfig, error)
	AuthzConfigNamespaceListerExpansion
}

// authzConfigNamespaceLister implements the AuthzConfigNamespaceLister
// interface.
type authzConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AuthzConfigs in the indexer for a given namespace.
func (s authzConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.AuthzConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AuthzConfig))
	})
	return ret, err
}

// Get retrieves the AuthzConfig from the indexer for a given namespace and name.
func (s authzConfigNamespaceLister) Get(name string) (*v1.AuthzConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("authzconfig"), name)
	}
	return obj.(*v1.AuthzConfig), nil
}
